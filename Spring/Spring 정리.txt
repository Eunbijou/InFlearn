자바 스프링 프레임워크
1. 스프링 개요
 1-1. 스프링 프레임워크
 - 스프링 프레임워크는 주요 기능으로 DI, AOP, MVC, JDBC 등을 제공한다.
 1-2. 스프링 프레임워크 모듈
 - 스프링 프레임워크에서 제공하고 있는 모듈을 사용하려면, 모듈에 대한 의존설정을 개발 프로젝트에 XML 파일 등을 이용해서 개발자가 직접하면 된다.
spring-core : 스프링의 핵심인 DI(Dempenedncy Injection)와 IoC(Inversion of Control)를 제공
spring-aop : AOP 구현 기능 제공
spring-jdbc : 데이터베이스를 쉽게(적은 양의 코드) 다룰 수 있는 기능 제공
spring-tx : 스프링에서 제공하는 트랜잭션 관련 기능 제공
spring-webmvc : 스프링에서 제공하는 컨트롤러(Controller)와 뷰(View)를 이용한 스프링 MVC 구현 기능 제공

 1-3. 스프링 컨테이너(IoC)
 - 스프링에서 객체를 생성하고 조립하는 컨테이너(container)로, 컨테이너를 통해 생성된 객체를 빈(Bean)이라고 부른다.
 - 객체 생성 및 속성 데이터 작성(XML 문서) -> 스프링 컨테이너에서 객체 생성 및 조립(스프링 컨테이너 > 빈 생성 및 조립) -> 애플리케이션 구현(개발문서)

2. 개발 환경 구축
 2-1. Java 설치
 - JDK(Java Development Kit) 설치 : 개발자는 JDK가 있어야 개발을 할 수 있고, 단지 프로그램만을 사용하는 사용자라면 JRE만 설치되어 있으며 된다.
 2-2. Path 설정
 - javac.exe, java.exe(JVM 구동 명령 컴파일러)를 다른 디렉터리에서도 실행할 수 있도록 하기 위해 환경 변수(Path)에 bin 경로를 등록한다.
 - JAVA_HOME 환경 변수 추가, Path 환경 변수에 JDK의 bin 디렉터리 추가
 2-3. IDE(이클립스) 다운로드
 - IDE(Integrated Development Environment : 통합 개발 환경) 설치 – eclipse

3. 스프링 프로젝트 생성
 3-1. 프로젝트 생성
 - New -> Project -> Maven Project -> Create a simple project(skip archetype selection), Use default Workspace location -> Group Id : spring4, Artifact Id : pjt03
 3-2. pom.xml 작성
<dependencies>
 <dependency>
  <groupId>org.springframework</groupId>
  <artifactId>spring-context</artifactId>
  <version>4.1.0.RELEASE</version>
 </dependency>
</dependencies>
<build>
 <plugins>
  <plugin>
   <artifactId>maven-compiler-plugin</artifactId>
   <version>3.1</version>
   <configuration>
    <source>1.8</source>
    <target>1.8</target>
    <encoding>utf-8</encoding>
   </configuration>
  </plugin>
 </plugins>
</build>
 - 프로젝트의 JRE 라이브러리 버전이 메이븐 설정 파일에 명시되어 있는 버전과 일치하지 않아서 발생하는 것으로 프로젝트를 업데이트하라고 나온다.
 - 우클릭 -> Maven -> Update Project
 3-3. 폴더 및 pom.xml 파일의 이해
 - pjt03 프로젝트 : 스프링 프로젝트 Root
 - pjt03/src/main/java 폴더 : .java 파일 관리
 - pjt03/src/main/resources 폴더 : 자원 파일 관리
 - java 폴더의 경우 특별한 것은 없고, 앞으로 만들어지는 자바 파일들이 관리되는 폴더이다.
 - resources 폴더의 경우 자원을 관리하는 폴더로 스프링 설정 파일(XML) 또는 프로퍼티 파일 등이 관리된다.
 - java, resources 폴더는 스프링 프레임워크의 기본 구조를 이루는 폴더로 개발자는 이대로 폴더를 구성해야 한다.
 - pom.xml 파일은 메이블 설정 파일로 메이븐은 라이브러리를 연결해주고, 빌드를 위한 플랫폼이다.
 - pom.xml에 의해서 필요한 라이브러리만 다운로드 해서 사용한다.
 - 라이브러리는 C:\Users\사용자\.m2\repository\org\springframework 경로에서 확인 가능하다. 참고로 모듈의 라이브러리 파일명은 artifactId + “-” + 버전 명 + “.jar”로 표시된다. 

4. 처음해 보는 스프링 프로젝트
 4-1. Java 파일을 이용한 프로젝트 실행
 - New -> Class -> TransportationWalk
public void move() {
   System.out.println(“도보로 이동합니다.”);
}
 - 똑같이 MainClass를 생성해준다.
 4-2. 우선 따라 해 보는 스프링 프로젝트
 - 스프링 방식의 ‘의존’을 이용하기 위해서는 Main에서 TransportationWalk 객체를 직접 생성하지 않고, 스프링 설정 파일(XML)을 이용해 보기로 한다. 가장 큰 차이점은 Java 파일에서 이용한 new 연산자를 이용하지 않고 스프링 설정 파일(XML)을 이용하는 것이다.
 - New -> XML File -> applicationContext.xml

5. 또 다른 프로젝트 생성 방법
 5-1. 폴더(java, resources)와 파일(pom.xml) 만들기
 - 프로젝트 진행할 파일에 새폴더를 생성하고, pom.xml을 생성한다.
 5-2. 이클립스에서 import 하기
 - 우클릭 후 import -> Existing Maven Projects -> Root Directory에 경로 입력 -> Finish 

6. DI(Dependency Injection)
 6-1. DI(Dependency Injection)란?
 - 배터리 일체형 -> 배터리가 떨어지면 장난감을 새로 구입해야 한다.
publicclassElectronicCarToy {

   privateBattery battery;

   publicElectronicCarToy() {
      battery= newNormalBattery();
   }
}
 - 배터리 분리형 -> 배터리가 떨어지면 배터리만 교체하면 된다.
publicclassElectronicRobotToy {

   privateBattery battery;

   publicElectronicRobotToy() {
   }
   publicvoidsetBattery(Battery battery) {
      this.battery= battery;
   }
}
 6-2. 스프링 DI 설정 방법
 - 스프링 컨테이너 생성 및 빈(Bean) 객체 호출 과정 : 스프링 설정파일(applicationContext.xml) -> GenericXmlApplicationContext -> Spring Container(객체 getBean()) -> 빈(Bean) 객체를 필요로 하는 로직
 - 클래스 구조 : MainClass -> 조립기(Java 언어 이용) : StudentAssembler(객체 생성 및 조립기), 조립기(XML 언어 이용) : applicationContext(객체 생성 및 조립기) -> service 클래스(ems.member.service) : StudentRegisterService(학생정보 등록), StudentSelectService(학생 정보 조회), StudentModifyService(학생 정보 수정), StudentDeleteService(학생 정보 삭제), StudentAllSelectService(전체 학생 정보 조회), EMSInformationService(시스템 정보) -> DAO 클래스(ems.member.dao) : StudentDao(학생 정보 관리)

7. 다양한 의존 객체 주입
 7-1. 생성자를 이용한 의존 객체 주입
 - publicStudentRegisterService(StudentDao studentDao) {
this.studentDao= studentDao;
}
 -> <bean id="registerService" class="ems.member.service.StudentRegisterService">
<constructor-arg ref="studentDao" ></constructor-arg>
</bean>
 7-2. setter를 이용한 의존 객체 주입
 - publicvoidsetJdbcUrl(String jdbcUrl) {
this.jdbcUrl= jdbcUrl;
}
publicvoidsetUserId(String userId) {
this.userId= userId;
}
publicvoidsetUserPw(String userPw) {
this.userPw= userPw;
}
 -> <bean id="dataBaseConnectionInfoDev" class="ems.member.DataBaseConnectionInfo">
<property name="jdbcUrl" value="jdbc:oracle:thin:@localhost:1521:xe" />
<property name="userId" value="scott" />
<property name="userPw" value="tiger" />
</bean>
 7-3. List 타입 의존 객체 주입
 - publicvoidsetDevelopers(List<String> developers) {
this.developers= developers;
}
 -> <property name="developers">
<list>
<value>Cheney.</value>
<value>Eloy.</value>
<value>Jasper.</value>
<value>Dillon.</value>
<value>Kian.</value>
</list>
</property>
 7-4. Map 타입 의존 객체 주입
 - publicvoidsetAdministrators(Map<String, String> administrators) {
this.administrators= administrators;
}
 -> <property name="administrators">
<map>
<entry>
<key>
<value>Cheney</value>
</key>
<value>cheney@springPjt.org</value>
</entry>
<entry>
<key>
<value>Jasper</value>
</key>
<value>jasper@springPjt.org</value>
</entry>
</map>
</property>

8. 스프링 설정 파일 분리
 8-1. 스프링 설정 파일 분리
 - applicationContext.xml -> appCtx1.xml, appCtw2.xml, appCtx3.xml 
 8-2. 빈(Bean)의 범위
 - 싱글톤(Singleton) : 스프링 컨테이너에서 생성된 빈(Bean) 객체의 경우 동일한 타입에 대해서는 기본적으로 한 개만 생성이 되며, getBean() 메소드로 호출될 때 동일한 객체가 반환된다.
 - 프로토타입(Prototype) : 싱글톤 범위와 반대의 개념도 있는데 이를 프로토타입 범위라고 한다. 프로토타입의 경우 개발자는 별도로 설정을 해줘야 하는데, 스프링 설정 파일에서 빈(Bean) 객체를 정의할 때 scope 속성을 명시해 주면 된다. 
